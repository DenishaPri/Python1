# -*- coding: utf-8 -*-
"""LVADSUSR81-DenishaPriyaG-IA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nH4bu5DSRg_2qF4fvrDCutyklHmRrkAX
"""

#ques1
import numpy as np
rgb_image = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
                      [[255, 255, 0], [255, 0, 255], [0, 255, 255]],
                       [[127,127,127],[200,200,200],[50,50,50]]])
gray_image = np.dot(rgb_image[..., :3], [0.2989, 0.5870, 0.1140]).astype(np.uint8)

print(gray_image)

#ques2
import numpy as np
arr = np.array([[160, 50, 21],
                [160.5, 51, 22],
                [154, 48, 23]])
mean = np.mean(arr)
std = np.std(arr)
print(mean)
print(std)

#ques3
import numpy as np
sensor1 = np.array([[[1,2,3],[4,5,6]]])
# sensor1 = np.random.rand(1, 2, 3)
sensor2 = np.array([[[2,3,5],[6,4,8]]])
sensor3 = np.array([[[7,5,8],[1,4,7]]])
# print(sensor1)
# print(sensor2)
# print(sensor3)

data1 = sensor1.flatten()
data2 = sensor2.flatten()
data3 = sensor3.flatten()
concatenated_array = np.concatenate((data1, data2, data3))
print(concatenated_array)
result = concatenated_array.reshape(1, -1)
print(result)

#ques4
import numpy as np
athlete_data = np.array([['A', 'B', 'C', 'D', 'F'], [10, 11, 12, 9, 11]])
athlete_data = athlete_data.transpose()
athlete_data[:, 1] = athlete_data[:, 1].astype(int)
improvement = athlete_data[:, 1][-1] - athlete_data[:, 1][0]
print("Improvement:", improvement)

#ques5
import numpy as np

student_marks = np.array([
    [60, 75, 80, 90, 99],
    [70, 89, 75, 78, 85],
    [90, 85, 35, 100, 68]
])

last_three_subjects = student_marks[:, -3:]
average_last_three = np.mean(last_three_subjects, axis=1)
print(average_last_three)

#ques6
import pandas as pd
import numpy as np
climate = ({


})

#ques7
data = {
    'Name':['Alice','Bob','Charlie','David','Eve','Frank','Grace'],
    'Age':[25,30,35,40,45,50,55],
    'City':['New York','Los Angeles','Chicago','Houston','Phoenix','Miami','Boston'],
    'Department':['HR','IT','Finace','Marketing','Sales','IT','HR'],
}
df = pd.DataFrame(data)
employee = df[(df['Age']<45)&(df['Department'] != 'HR')]
print(employee[['Name','City']])

#ques8
df = pd.DataFrame({
    'product':['apples','bananas','cherries','dates','elderberries','Flour','grapes'],
    'category':['fruit','fruit','fruit','fruit','fruit','bakery','fruit'],
    'price':[1.20,0.50,3.00,2.50,4.00,1.50,2.00],
    'promotion':[True,False,True,True,False,True,False]
})

average = df[df['category'] == 'fruit']['price'].mean()
potential_candidates = df[(df['category'] == 'fruit') &
                          (df['price'] >= average * 0.9) &
                          (df['price'] <= average * 1.1) &
                          (~df['promotion'])]

print(potential_candidates)

#ques9
employee_df=pd.DataFrame({
    'Employee':['Alice','Bob','Charlie','David'],
    'Department':['HR','IT','Finace','IT'],
    'Manager':['John','Rachel','Emily','Rachel']
})
project_df=pd.DataFrame({
    'Employee':['Alice','Charlie','Eve'],
    'Project':['P1','P2','P3']
})
merge = pd.merge(employee_df,project_df,on='Employee',how='left')
departments = merge['Department'].unique()
unassigned_df = pd.DataFrame(columns=['Employee', 'Project', 'Department', 'Manager'])

for dept in departments:
    dept_df = merge[merge['Department'] == dept]
    unassigned_employees = employee_df[~employee_df['Employee'].isin(dept_df['Employee'])]
    unassigned_employees['Project'] = None
    unassigned_employees['Department'] = dept
    unassigned_employees['Manager'] = employee_df.loc[employee_df['Department'] == dept, 'Manager'].iloc[0]

    unassigned_df = unassigned_df.append(unassigned_employees, ignore_index=True)
complete_df = pd.concat([merge, unassigned_df])

print(complete_df)

#ques10
import pandas as pd
data = pd.DataFrame({
    'Department':['Electronics','Clothing','Clothing','Home','Goods'],
    'Salesperson':['Alice','Bob','Charlie','David','Eve'],
    'Sales':[70000,50000,30000,40000,60000]
})
avgsales = data.groupby('Department')['Sales'].mean()
sorted = avgsales.sort_values(ascending=False)
print(sorted)